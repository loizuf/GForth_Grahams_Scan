\ Usage: "2 3 point-matrix points" creates a 2 dimensional array (2x3) named points. We create an array of length |points| and "width" 3 (x coordinate, y coordinate, sorting_value)
: square ( x -- x^2)
	dup * ;

: fsquare ( x_e -- [x_e]^2)
	fdup f* ;

: int-f-div ( x y -- [x/y]e)
	s>f s>f f/ ;

: f2dup ( a_e b_e -- a_e b_e a_e b_e )
	fover fover ;

: f-rot ( a_e b_e c_e -- c_e a_e b_e )
	frot frot ;

: 3dup ( x y z -- x y z x y z )
	2 pick 2 pick 2 pick ;

\ ---------------------------------------------------------------------------------------------------------


: get-angle ( x_e y_e -- angle )
	fover 0e f>
	if ( if x>0, all is normal )
		fswap f/ fatan ( x y -- atan[y/x] )
	else
		fover 0e f<
		if ( if x<0, add PI )
			fswap f/ fatan PI f+ ( x y -- atan[y/x] + PI )
		else
			fdup 0e f=
			if
				fdrop fdrop 0e 
			else
			fdrop fdrop PI 2e f/ ( if x=0, 'return' PI/2, since float this is improbable )
			then
		then
	then ;

: int-get-angle ( x y -- atan[y/x] )
	swap s>f s>f ( push x_e y_e on the floatstack )
	get-angle ;

: int-convert-to-polar ( x y -- r phi )
	2dup 					\ we need it two times for r and for phi
	square s>f square s>f 	\ x^2 and y^2, both converted to float because we need to get the root in the next step
	f+ fsqrt 				\ r = sqrt(x^2 + y^2)
	int-f-div fatan	;		\ atan(y/x)

: float-convert-to-polar ( x y -- r phi )
	f2dup 					\ we need it two times for r and for phi
	fsquare fswap fsquare 	\ x^2 and y^2
	f+ fsqrt 				\ r = sqrt(x^2 + y^2)
	f-rot 					\ ( x y r -- r x y )
	fswap f/ fatan ;		\ atan(y/x)

: convert-to-cartesian ( r phi -- xe ye )
	f2dup
	fsin f* f-rot
	fcos f* ;

\ ---------------------------------------------------------------------------------------------------------


: split ( str len separator len -- tokens count, splits a string by separator )
  here >r 2swap
  begin
    2dup 2,             \ save this token ( addr len )
    2over search        \ find next separator
  while
    dup negate  here 2 cells -  +!  \ adjust last token length
    2over nip /string               \ start next search past separator
  repeat
  2drop 2drop
  r>  here over -   ( tokens length )
  dup negate allot           \ reclaim dictionary
  2 cells / ;                \ turn byte length into token count
 
: intToken ( tokens --, convert a line with coordinates to integer )
  dup 2@ s>number? 2drop swap ( x tokens )
  cell+ cell+ 2@ s>number? 2drop ;

128 Constant max-line \ the maximum line length
Create line-buffer max-line 2 + allot \ read buffer
0 Value fd-in

: open-input ( addr u -- )  r/o open-file throw to fd-in ;

: loadPoints ( -- x1 y1 x2 y2 ... xn yn, load points from file on to the stack )
	s" in.txt" open-input
	begin
		line-buffer max-line fd-in read-line throw ( length not-eof-flag )
	while ( length )
		line-buffer swap s"  " split drop intToken
	repeat drop
	fd-in close-file throw ;

: toString ( n -- s count, convert a number to string ) \ CAN THIS BE MODIFIED TO DEAL WITH NEGATIVES?
	s>d swap over dabs <<# #s rot sign #> #>> s" " s+ ;

: concatCoords ( yaddr1 u1 xaddr2 u2 -- addr u, x <space> y )
	s"  " append 2swap append ;

0 Value fd-out
: open-output ( addr u -- )  w/o create-file throw to fd-out ;
Defer get-point-deferred ( -- )
: savePoints { a minx miny } ( id_1 id_2 ... id_k depth addr -- , save the convex hull coordinates )
    s" out.txt" open-output
	0 u+do
		a swap get-point-deferred
		fswap f>s f>s
		swap minx +
		swap miny +
		toString rot toString concatCoords
		fd-out write-line throw
	loop
	fd-out close-file throw ;
 
loadPoints					\ puts coordinates on stack
depth 2 / create length , 	\ number of points is on top of the stack, save it in length

\ ----------------------------------------------------------------------------------------------


\ get size of matrix
: calculate-matrix-size ( a b -- c )
	* floats ;

: calculate-point-matrix-size ( point_count -- size )
	3 calculate-matrix-size ;

: advance-to-point ( addr id -- addr ) \ where 
	3 * floats + ;

: float-set-point ( addr point_id [x_e y_e] -- ) \ [x_e y_e] is on float stack 
	fswap ( x_e y_e -- y_e x_e )
	advance-to-point 	\ go to x coordinate of point with id 'point_id'
	dup 				\ we need to store x AND y
	f! 1 floats + f! ;	\ store x at [id,0] and y at [id,1], CAUTION: order on float stack is 'y_e x_e' at this point

\ sets x and y as coordinates of point with id point_id
: set-point ( addr point_id x y -- ) 
	s>f s>f ( x y -- y_e x_e )
	advance-to-point 	\ go to x coordinate of point with id 'point_id'
	dup 				\ we need to store x AND y
	f! 1 floats + f! ;	\ store x at [id,0] and y at [id,1], CAUTION: order on float stack is 'y_e x_e' at this point

\ converts n into the x and y coordinate of the n-th point (obviously starting at 0)
: get-point ( addr point_id -- x_e y_e )
	advance-to-point
	dup
	f@ 1 floats + f@ ; \ get x_e y_e on the stack from [id,0] and [id,1]

\ converts n into the sorting value of the n-th point (obviously starting at 0)
: get-point-third ( addr point_id -- sort_crit )
	advance-to-point
	2 floats + f@ ;

\ with x and y value of the pivot point on the stack this calculates the sorting value of every point in this set
: set-point-third ( addr point_id [angle]] -- ) \ [angle] is on float stack 
 	advance-to-point
	2 floats + f! ;

\ ----------------------------------------------------------------------------------------------


: get-x-from-stack ( x_n y_n ... x_0 y_0 i -- x_n y_n ... x_0 y_0 x_i ) \ assuming that all points are on the stack after each other, put the i-th x-value on the TOS
	2 * 1 + \ x avlues are at the odd places
	pick ; 	\ copy that value on the TOS

: get-y-from-stack ( x_n y_n ... x_0 y_0 i -- x_n y_n ... x_0 y_0 y_i ) \ assuming that all points are on the stack after each other, put the i-th y-value on the TOS
	2 * 	\ y avlues are at the even places
	pick ; 	\ copy that value on the TOS

: set-minimals-x { a b c } ( addr_min_x addr_min_y addr_min_id -- )
	length @ 0 
	u+do
		i get-x-from-stack 	\ get i-th x value
		dup a @ < 	\ check if smaller than minimal-x value
		if
			a !
			i get-y-from-stack 	\ set new minimal-x
			b !
			i c !
		else
			drop 			\ drop the value
		then
	loop  ; 

: set-minimals-y { a b c } ( addr_min_x addr_min_y addr_min_id -- )
	length @ 0 
	u+do
		i get-y-from-stack 	\ get i-th x value
		dup b @ < 	\ check if smaller than minimal-x value
		if
			b !
			i get-x-from-stack 	\ set new minimal-x
			a !
			i c !
		else
			drop 			\ drop the value
		then
	loop ; 

: make-one-positive-and-fill { d e f g } ( x_n y_n ... x_0 y_0 addr_minimal_y addr_minimal_x addr i --     [all values are shifted such that they are positive and saved in points] )
	d @ - swap 		\ subtract minimal-x value and swap, REMARK addr_minimal_y is currently TOS
	e @ - swap 	\ subtract minimal-y value and swap
	2dup	( x y -- x y x y )
	f g 2swap ( x y x y -- x y addr id x y ) int-get-angle set-point-third
	f g 2swap	( x y -- addr id x y ) 			set-point ;

: make-all-positive-and-fill { a b c } ( x_n y_n ... x_0 y_0 addr_minimal_x addr_minimal_y addr --     [all values are shifted such that they are positive and saved in points] )
	length @ 0
	u+do
		b a c i make-one-positive-and-fill
	loop ; \ after every iteration the next point is at the TOS

\ -----------------------------------------------------------------------------


: copy-to ( addr_sorted id_sorted addr_points id_points -- ) \ copies an entry from one array to another
	2dup
	get-point-third		\ we're dealing with floats at this point so this lands on the float stack
	get-point 			( addr id addr id -- third_e x_e y_e)
	2dup
	float-set-point 
	set-point-third ;	

: radial-sort { a b c d } ( minimal_id min_angle points_sorted points -- ) \ simple selectionsort
	c 0 d a @ copy-to
 	d a @ 256e set-point-third \ set minimal-value to upper threshhold
 	length @ 1 
 	u+do
 		b 256e f!
 		length @ 1
 		u+do \ it's an O(n^2) loop which is terrible but does not matter
 			d i get-point-third fdup b f@ f< \ check if the thir value of point with id i is smaller than the current min_angle
 			if \ if so we
 				b f! 	\ save the new minimal value in min_angle
 				i a ! 	\ and the id of this new minimum
 			else \ else discard it
 				fdrop
 			then
 		loop
 		c i d a @ copy-to \ minimum of the current round is saved in the next (i-th) entry of the sorted array
 		d a @ 256e set-point-third \ set minimal-value to upper threshhold
 	loop ; 

: initialize ( addr -- addr 0 addr 1 addr 2 )
	0 1 ;

: to_the_left ( x_1 y_1 x_2 y_2 x_3 y_3 -- value ) \ this flag NEGATIVE if (x_3,y_3) is to the left, Positive if to the right and 0 othrewise
	1 fpick \ get x_3
	6 fpick \ get x_1
	f-		\ (x_3 - x_1)
	3 fpick \ get y_2
	6 fpick \ get y_1
	f-      \ (y_2 - y_1)
	f*		\ (x_3 - x_1)(y_2 - y_1)

	1 fpick \ get y_3
	6 fpick \ get y_1
	f- 		\ (y_3 - y_1)
	5 fpick \ get x_2
	8 fpick \ get x_1
	f- 		\ (x_2 - x_1)
	f*		\ (y_3 - y_1)(x_2 - x_1)

	f- 		\ (x_3 - x_1)(y_2 - y_1) - (y_3 - y_1)(x_2 - x_1)

	\ this can be optimized since we actually only need 2 values copied, not all 8
	6 0
	u+do
		fnip \ remove the points
	loop ;

: graham-condition { b } ( id_1 id_2 id_3 addr -- flag ) \ the three ids of the points we have on the TOS and we want to check
	b 3 pick get-point
	b 2 pick get-point
	b 1 pick get-point 
	to_the_left 0e f< ; \ place p_1, p_2 and p_3 on the FLOAT stack

: graham-scan { a } ( addr -- addr id_1 id_2 ... id_k )
	initialize
	length @ 2
	u+do
		i \ push next id (point) on the stack
		begin
			a graham-condition invert \ if p_3 is NOT to the left of the line [p_1, p_2]
		while
			nip \ remove p_2
		repeat
	loop depth ; 

\ -----------------------------------------------------------------------------


: test_points 
	length @ 0
	u+do
		dup i get-point dup i get-point-third f. f. f.
	loop ;

: prepare-for-output { a } ( id_1 id_2 ... id_k addr_sorted size -- x_1 y_1 x_2 y_2 ... x_k y_k size)
	a 0
	u+do
		dup rot ( id addr -- addr addr id )
		get-point \ point is on the float stack
	loop 
	drop
	\ now all points are on the float stack in reverse order
	a 0
	u+do
		fswap f>s f>s ( [x_e y_e] -- x y ) \ [x_e y_e] were on the float stack
	loop
	a ; 

\ --------------------------------------------------------------------------------------


variable minimal-x 1000 , 		\ finding the minimal-x value to add
variable minimal-y 1000 , 		\ finding the minimal-y value to add
variable minimal-id 0 , 		\ finding the minimal-y value to add
variable min-angle 256e f,	\ variable for finding the smallest angle
create points length @ calculate-point-matrix-size allot \ create the point matrix with the size [|points|, 3]
create points_sorted length @ calculate-point-matrix-size allot \ create the point matrix with the size [|points|, 3]

1000 minimal-x ! 1000 minimal-y !

minimal-x minimal-y minimal-id 
set-minimals-y 			\ set the minimal point to the lowest point

minimal-x minimal-y points 
make-all-positive-and-fill 	\ shift all points and fill them into the point-matrix

minimal-id min-angle points_sorted points
radial-sort \ sort points radially

\ points_sorted test_points

points_sorted 
graham-scan ( addr -- id_1 id_2 ... id_k depth )

' get-point IS get-point-deferred
points_sorted minimal-x @ minimal-y @ savePoints